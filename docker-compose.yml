version: '2.2'
services:
  init-container:
    image: alpine:latest
    volumes:
      - ./src:/src
      - ./config/ASP/config.php:/src/ASP/system/config/config.php
      - ./config/bf2sclone/config.inc.php:/src/bf2sclone/config.inc.php
      - backups-volume:/src/ASP/system/database/backups # This volume is effectively unused since ASP doesn't allow DB backups for a remote DB, but mount it anyway to avoid errors.
      - logs-volume:/src/ASP/system/logs
      - snapshots-volume:/src/ASP/system/snapshots
      - bf2sclone-cache-volume:/src/bf2sclone/cache
      - db-volume:/var/lib/mysql
    entrypoint:
      - /bin/sh
    command:
      - -c
      - |
          set -eu

          echo "Granting ASP nginx and php read permissions"
          find /src/ASP -type d -exec chmod 755 {} \;
          find /src/ASP -type f -exec chmod 644 {} \;

          echo "Granting ASP php write permissions"
          chmod 777 /src/ASP/system/config
          chmod 666 /src/ASP/system/config/config.php
          chmod 666 /src/ASP/system/config/config.php.bak || true

          chown -R 82:82 /src/ASP/system/database/backups
          find /src/ASP/system/database/backups -type d -exec chmod 750 {} \;
          find /src/ASP/system/database/backups -type f -exec chmod 640 {} \;

          chown -R 82:82 /src/ASP/system/logs
          find /src/ASP/system/logs -type d -exec chmod 750 {} \;
          find /src/ASP/system/logs -type f -exec chmod 640 {} \;

          mkdir -p /src/ASP/system/snapshots/processed
          mkdir -p /src/ASP/system/snapshots/temp
          chown -R 82:82 /src/ASP/system/snapshots
          find /src/ASP/system/snapshots -type d -exec chmod 750 {} \;
          find /src/ASP/system/snapshots -type f -exec chmod 640 {} \;

          echo "Granting bf2sclone nginx and php read permissions"
          find /src/bf2sclone -type d -exec chmod 755 {} \;
          find /src/bf2sclone -type f -exec chmod 644 {} \;

          echo "Granting bf2sclone php write permissions"
          chown -R 82:82 /src/bf2sclone/cache
          find /src/bf2sclone/cache -type d -exec chmod 750 {} \;
          find /src/bf2sclone/cache -type f -exec chmod 640 {} \;

          echo "Granting db write permissions"
          chown -R 999:999 /var/lib/mysql

  asp-nginx:
    image: nginx:1.21-alpine
    volumes:
      - ./src/ASP:/src/ASP
      - ./config/ASP/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 8081:80
    networks:
      # Spoof ASP web server DNS for the bf2 server
      bf2-network:
        aliases:
          - bf2web.gamespy.com
          - gamestats.gamespy.com
          - eapusher.dice.se
    depends_on:
      - init-container
      - asp-php
    working_dir: /src

  asp-php:
    build:
      dockerfile: Dockerfile.asp-php.dev
      context: .
    volumes:
      - ./src/ASP:/src/ASP
      - ./config/ASP/config.php:/src/ASP/system/config/config.php # Main config file. Must be writeable or else ASP will throw an exception. Customize as needed
      - ./config/ASP/php/conf.d/php.ini:/usr/local/etc/php/conf.d/php.ini:ro
      - ./config/ASP/php-fpm.d/www.conf:/usr/local/etc/php-fpm.d/www.conf:ro
      - backups-volume:/src/ASP/system/database/backups # This volume is effectively unused since ASP doesn't allow DB backups for a remote DB, but mount it anyway to avoid errors.
      - logs-volume:/src/ASP/system/logs
      - snapshots-volume:/src/ASP/system/snapshots
    networks:
      - bf2-network
    extra_hosts:
      # For xdebug to reach the host via `host.docker.internal`. See: https://github.com/moby/moby/pull/40007#issuecomment-578729356 and https://stackoverflow.com/questions/49907308/installing-xdebug-in-docker
      # If xdebug does not work, you may need to add an iptables rule to the INPUT chain: iptables -A INPUT -i br+ -j ACCEPT
      - host.docker.internal:host-gateway
    depends_on:
      - init-container

  bf2sclone-nginx:
    image: nginx:1.21-alpine
    volumes:
      - ./src/bf2sclone:/src/bf2sclone
      - ./config/bf2sclone/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 8082:80
    networks:
      - bf2-network
    depends_on:
      - init-container
      - bf2sclone-php
    working_dir: /src

  bf2sclone-php:
    build:
      dockerfile: Dockerfile.bf2sclone-php.dev
      context: .
    volumes:
      - ./src/bf2sclone:/src/bf2sclone
      - ./config/bf2sclone/config.inc.php:/src/bf2sclone/config.inc.php:ro # Main config file. Customize as needed
      - ./config/bf2sclone/php/conf.d/php.ini:/usr/local/etc/php/conf.d/php.ini:ro
      - ./config/bf2sclone/php-fpm.d/www.conf:/usr/local/etc/php-fpm.d/www.conf:ro
      - bf2sclone-cache-volume:/src/bf2sclone/cache
    networks:
      - bf2-network
    extra_hosts:
      # For xdebug to reach the host via `host.docker.internal`. See: https://github.com/moby/moby/pull/40007#issuecomment-578729356 and https://stackoverflow.com/questions/49907308/installing-xdebug-in-docker
      # If xdebug does not work, you may need to add an iptables rule to the INPUT chain: iptables -A INPUT -i br+ -j ACCEPT
      - host.docker.internal:host-gateway
    depends_on:
      - init-container

  db:
    image: mariadb:10.8
    environment:
      - MARIADB_ROOT_PASSWORD=admin
      - MARIADB_USER=admin
      - MARIADB_PASSWORD=admin
      - MARIADB_DATABASE=bf2stats
    volumes:
      - ./config/db/my.cnf:/etc/my.cnf:ro
      - db-volume:/var/lib/mysql
    networks:
      - bf2-network
    depends_on:
      - init-container

  phpmyadmin:
    image: phpmyadmin:5.2
    environment:
      - PMA_HOST=db
    ports:
      - 8083:80
    networks:
      - bf2-network

networks:
  bf2-network:

volumes:
  backups-volume:
  logs-volume:
  snapshots-volume:
  bf2sclone-cache-volume:
  db-volume:
